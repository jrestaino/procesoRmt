import os
import json
import re

def procesar_resultados_seguro(texto, directorio_base="."):
    """
    Versi칩n m치s segura para procesar el texto usando json.
    
    Args:
        texto (str): Texto en formato {entero: float, ...}
        directorio_base (str): Directorio base donde se crear치n los subdirectorios
    """
    try:
        # Convertir el texto a formato JSON v치lido
        texto_json = re.sub(r'(\d+):', r'"\1":', texto)
        
        # Parsear con json
        datos = json.loads(texto_json)
        
        for entero, valor_float in datos.items():
            # Redondear a 2 decimales
            valor_redondeado = round(valor_float, 2)
            
            # Crear ruta del directorio
            directorio = os.path.join(directorio_base, str(entero))
            
            # Crear directorio si no existe
            os.makedirs(directorio, exist_ok=True)
            
            # Ruta del archivo
            archivo_path = os.path.join(directorio, "top10Clases.txt")
            
            # Escribir el valor redondeado en el archivo
            with open(archivo_path, 'w', encoding='utf-8') as archivo:
                archivo.write(f"{valor_redondeado:.2f}")
            
            print(f"Creado: {archivo_path} con valor {valor_redondeado:.2f}")
            
    except Exception as e:
        print(f"Error al procesar los datos: {e}")

# Ejemplo de uso
if __name__ == "__main__":
    texto_ejemplo = "{0: 73.29797064576908, 1: 63.95286041739172, 2: 78.18714222280894, 3: 67.88435921130008, 4: 72.14468299590769, 5: 73.0075485736916, 6: 65.61378664778525, 7: 75.53974102031754, 8: 73.65919809905553, 9: 71.81105764038067, 10: 76.07738188102296, 11: 74.48246066701068, 12: 72.01867341917985, 13: 75.68015169152855, 14: 73.10715614386693, 15: 69.05564822926542, 16: 73.27396882163045, 17: 77.68550409831148, 18: 71.21341221932865, 19: 77.4706877722707, 20: 67.83515547181587, 21: 71.07540173053151, 22: 72.07387761469872, 23: 72.21068801228893, 24: 64.25048303671078, 25: 73.06995331645203, 26: 71.27581696208911, 27: 78.29155015781197, 28: 71.97186986210951, 29: 72.26469211660086, 30: 72.9055408211024, 31: 66.94468779627253, 32: 71.5662390341666, 33: 70.48975722154883, 34: 77.6375004500342, 35: 67.61073841611962, 36: 72.74712878178741, 37: 73.45878286749793, 38: 78.1487393041871, 39: 67.5267320316344, 40: 73.83441141526755, 41: 75.06930526720032, 42: 74.80048483684759, 43: 70.91818978242345, 44: 66.80667730747537, 45: 74.67207507770591, 46: 69.41327540893107, 47: 74.47285993735522, 48: 68.76282597477407, 49: 68.93203883495146, 50: 67.40432272852736, 51: 68.60801420907988, 52: 73.23316572059476, 53: 69.99891991791377, 54: 75.19531484392813, 55: 73.23796608542249, 56: 75.11730891547757, 57: 74.76448210063964, 58: 75.89376792636241, 59: 68.0139690616487, 60: 72.7267272312696, 61: 74.19323868614015, 62: 65.72419503882296, 63: 71.27221668846832, 64: 70.16093223084955, 65: 72.1374824486661, 66: 70.5941651565519, 67: 76.0149771382625, 68: 80.20089526804038, 69: 66.7286713790248, 70: 69.71809857549172, 71: 79.16401646525136, 72: 75.8073613594633, 73: 70.0613246606742, 74: 74.97209787943883, 75: 69.46007896600142, 76: 70.44175357327157, 77: 66.30863945659871, 78: 73.24036626783635, 79: 76.35220276741033, 80: 76.35820322344497, 81: 74.87489049167736, 82: 73.22956544697398, 83: 74.04922774130834, 84: 75.29372232289653, 85: 74.1644364971738, 86: 72.05227597297394, 87: 78.72478308351435, 88: 69.92451426308399, 89: 74.05042783251527, 90: 68.99804385133271, 91: 71.02259771742652, 92: 70.2353378856793, 93: 76.9978518367396, 94: 78.76198591092924, 95: 72.70392549833785, 96: 68.79642852856817, 97: 70.57976406206872, 98: 74.24964297286593, 99: 78.87359439317387, 100: 75.25171913065392, 101: 73.68800028802188, 102: 79.23962221128805, 103: 66.18743024469859}"
    
    procesar_resultados_seguro(texto_ejemplo, directorio_base=".")